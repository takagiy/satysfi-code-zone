@require: pervasives
@require: vdecoset
@require: option
@require: color
@require: list
@import: sized-list

type code-zone-style = (|
  sep : length;
  frame : deco-set;
  number-sep : length;
  number-sep-text : inline-text;
  number-sep-text-trailing : inline-text;
  number-font : (string * float * float) option;
  number-frame: deco-set;
  code-sep : length;
  code-font : string * float * float;
  code-frame : deco-set;
|)

module CodeZone : sig
  direct +code-of : [code-zone-style; string] block-cmd
  direct +code : [string] block-cmd
  val default-style : code-zone-style
end = struct
  let eol = string-unexplode [0x0A]

  let default-style = (|
    sep = 2pt;
    frame = VDecoSet.empty;
    number-sep = 0pt;
    number-sep-text = {\ };
    number-sep-text-trailing = {};
    number-font = None;
    number-frame = VDecoSet.empty;
    code-sep = 2pt;
    code-font = (`lmmono`, 1., 0.);
    code-frame = VDecoSet.simple-frame-stroke 0.5pt Color.black;
  |)

  let split-by-delimiter d s =
    let-rec aux maxlen len =
      let sub = string-sub s in
      if len >= maxlen then
        (s, None)
      else if string-same (sub len 1) d then
        ((sub 0 len), Some(sub (len + 1) (maxlen - len - 1)))
      else
        aux maxlen (len + 1)
    in
      aux (string-length s) 0

  let-rec string-lines s =
    open SizedList in
    match split-by-delimiter eol s with
    | (head, Some(tail)) -> head +: string-lines tail
    | (head, None)       -> head +: nil

  let-rec drop-empty-lines lst =
  match lst with
  | x :: xs ->
      if string-length x == 0 then
        drop-empty-lines xs
      else
        lst
  | []      -> []

  let ( => ) f g x = g (f x)

  let get-number-width sty number ctx =
    let digit-width = [{0}; {1}; {2}; {3}; {4}; {5}; {6}; {7}; {8}; {9}]
      |> List.map (read-inline ctx => get-natural-width)
      |> List.fold-left length-max 0pt
    in
    digit-width *' float (string-length (arabic number))
      +' get-natural-width (read-inline ctx sty#number-sep-text)

  let make-number ctx sty width number =
    let horz-number =
      let a = embed-string (arabic number) in
      let b = sty#number-sep-text in
      read-inline ctx {#a;#b;}
    in
    inline-skip (width -' get-natural-width horz-number) ++ horz-number

  let make-context sty number-width ctx =
    let font-size = get-font-size ctx in
    let ctx = ctx
      |> set-paragraph-margin (font-size *' 0.25) 0pt
      |> set-min-gap-of-lines (font-size *' 0.)
      |> set-leading (font-size *' 1.)
    in
    let number-context = ctx
      |> set-font Latin (Option.from (get-font Latin ctx) sty#number-font)
    in
    let code-context =
      let ctx = ctx
        |> set-font Latin sty#code-font
        |> set-hyphen-penalty 100000
      in
      let ctx =
        let char-width = get-natural-width (read-inline ctx {0}) in
          ctx |> set-space-ratio (char-width /' font-size) 0. 0.
      in
      let horz-empty-number =
        let horz-number-sep-text =
          read-inline number-context sty#number-sep-text-trailing
        in
        inline-skip (number-width -' get-natural-width horz-number-sep-text)
          ++ horz-number-sep-text
      in
      ctx
        |> set-every-word-break inline-nil (horz-empty-number ++ inline-skip sty#code-sep)

    in
    (number-context, code-context)

  let compound-deco sty nw f n c (x, y) width height depth =
    List.concat [
      f (x, y) width height depth;
      n (x, y) nw height depth;
      c (x +' nw +' sty#sep, y) (width -' nw -' sty#sep) height depth;
    ]

  let compound-deco-set number-width sty =
    match (sty#frame, sty#number-frame, sty#code-frame) with
    | ((f0, f1, f2, f3), (n0, n1, n2, n3), (c0, c1, c2, c3)) ->
      (
        compound-deco sty number-width f0 n0 c0,
        compound-deco sty number-width f1 n1 c1,
        compound-deco sty number-width f2 n2 c2,
        compound-deco sty number-width f3 n3 c3
      )

  let code-scheme-prior-info ctx sty code =
    let (number-context, _) = make-context sty 0pt ctx in
    let (code-line-count, code-lines) = string-lines code in
    let number-width =
      get-number-width sty code-line-count number-context
    in
    (|
      code-lines = code-lines;
      number-width = number-width;
    |)


  let code-scheme pre ctx sty code =
    let (number-context, code-context) = make-context sty pre#number-width ctx in
    pre#code-lines
      |> drop-empty-lines
      |> List.mapi (fun number code-line -> (
        let horz-code-line =
          inline-skip (sty#code-sep) ++
            (code-line
              |> embed-string
              |> read-inline code-context)
        in
        let horz-number =
          make-number number-context sty pre#number-width number
        in
        line-break true true code-context
          (horz-number ++ horz-code-line ++ inline-fil)))
      |> List.fold-left (+++) block-nil


  let-block ctx +code-of sty code =
    let pre = code-scheme-prior-info ctx sty code in
    block-frame-breakable ctx (sty#sep, length-max sty#sep sty#code-sep, sty#sep, sty#sep)
      (compound-deco-set pre#number-width sty)
        (fun ctx -> code-scheme pre ctx sty code)

  let-block +code code = '<+code-of(default-style)(code);>
end
